{"version":3,"sources":["components/helper.js","components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["generateSquares","squares","currentId","row","push","col","id","value","Square","onClickCallback","className","onClick","Board","squareList","flat","map","square","key","generateSquareComponents","WINNING_LINES","App","useState","setSquares","currentPlayer","setCurrentPlayer","filledSquareCount","setFilledSquareCount","winner","setWinner","player1","player2","score","setScore","updateStates","squaresCopy","switchPlayer","checkForWinner","player","idx","a","b","c","squareValues","getSquareValues","updateScoreState","forEach","isTie","printPlayerName","role","aria-label","filledSquare","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAAaA,EAAkB,WAI7B,IAHA,IAAMC,EAAU,GACZC,EAAY,EAEPC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CACnCF,EAAQG,KAAK,IAEb,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAChCJ,EAAQE,GAAKC,KAAK,CAChBE,GAAIJ,EACJK,MAAO,KAETL,GAAa,EAGjB,OAAOD,GCSMO,G,kBAlBA,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,gBAK1B,OACE,4BAAQC,UAAU,SAASC,QAAS,kBAAMF,EAAgBH,KACvDC,KCiCQK,EAxBD,SAAC,GAAkC,IACzCC,EAjByB,SAACZ,EAASQ,GAIzC,OAFuBR,EAAQa,OAETC,KAAI,SAAAC,GACxB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAOV,GACZA,GAAIU,EAAOV,GACXC,MAAOS,EAAOT,MACdE,gBAAiBA,OAOJS,CAD2B,EAA/BjB,QAA+B,EAAtBQ,iBAKxB,OACE,yBAAKC,UAAU,QACZG,ICrBDM,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IA+KMC,EA3KH,WAAO,IAAD,EAEcC,mBAASrB,KAFvB,mBAETC,EAFS,KAEAqB,EAFA,OAG0BD,mBAlB3B,KAeC,mBAGTE,EAHS,KAGMC,EAHN,OAIkCH,mBAAS,GAJ3C,mBAITI,EAJS,KAIUC,EAJV,OAKYL,mBAAS,MALrB,mBAKTM,EALS,KAKDC,EALC,OAWUP,mBAJX,CACbQ,QAAS,EACTC,QAAS,IATK,mBAWTC,EAXS,KAWFC,EAXE,KAwCVC,EAAe,SAACC,GACpBR,EAAqBD,EAAoB,GACzCH,EAAWY,GACXC,EAAaZ,GACbK,EAAUQ,MAKND,EAAe,SAACE,GACEb,EAjET,MAiEba,EAhEa,IADA,MAqETD,EAAiB,WAGrB,IAAI,IAAIE,KAAOnB,EAAe,CAAC,IAAD,cACVA,EAAcmB,GADJ,GACrBC,EADqB,KAClBC,EADkB,KACfC,EADe,KAGtBC,EAAeC,IAErB,GAAID,EAAaH,IAAMG,EAAaH,KAAOG,EAAaF,IAAME,EAAaF,KAAOE,EAAaD,GAG7F,OADAG,EAAiBF,EAAaH,IACvBG,EAAaH,GAGxB,OAAO,MAKHI,EAAkB,WACtB,IAAMD,EAAe,GAMrB,OAJAzC,EAAQ4C,SAAQ,SAAA7B,GACd0B,EAAatC,KAAKY,EAAO,GAAGT,MAAOS,EAAO,GAAGT,MAAOS,EAAO,GAAGT,UAGzDmC,GAMHI,EAAQ,WACZ,GAA0B,IAAtBrB,IAA4BE,EAC9B,MAAO,YAKLiB,EAAmB,SAACrC,GAEtByB,EA9GW,MA6GTzB,EACO,CACPsB,QAASE,EAAMF,QAAU,EACzBC,QAASC,EAAMD,SAGR,CACPD,QAASE,EAAMF,QACfC,QAASC,EAAMD,QAAU,KAqBzBiB,EAAkB,SAAAxC,GACtB,MA3Ia,MA2ITA,EACK,eAEA,gBAKX,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,oBACb,iDACA,yBAAKA,UAAU,eACb,sCACA,uCAAY,0BAAMsC,KAAK,MAAMC,aAAW,MAA5B,gBAAZ,aACA,uBAAGvC,UAAU,gBAAgBqB,EAAMF,QAAnC,MAA+CE,EAAMD,WAKzD,wBAAIpB,UAAWiB,GAAUmB,IAAU,SAAW,SAA9C,eACeC,EAAgBxB,IAG/B,wBAAIb,UAAYiB,GAAWmB,IAAqB,QAAX,UAClCA,IAAUA,IAAUC,EAAgBpB,GADvC,8BAIA,yBAAKjB,UAAU,oBACb,4BAAQA,UAAU,uBAAuBC,QA9C/B,WAEhBwB,EAAaR,GACbL,EAAWtB,KACX0B,EAAqB,GACrBE,EAAU,QAyCJ,cAIA,4BAAQlB,UAAU,qBAAqBC,QA1C3B,WAClBqB,EAAS,CACPH,QAAS,EACTC,QAAS,MAuCL,kBAMJ,8BACE,kBAAC,EAAD,CAAO7B,QAASA,EAASQ,gBAnJL,SAACH,GACzB,IAAM4B,EAAW,YAAOjC,GAExB,IAAI,IAAIE,KAAO+B,EACb,IAAI,IAAI7B,KAAO6B,EAAa,CAC1B,IAAIgB,EAAehB,EAAY/B,GAAKE,GAEpC,GAAIsB,GAAgC,IAAtBF,EAAyB,OAEvC,GAAIyB,EAAa5C,KAAOA,GAA6B,KAAvB4C,EAAa3C,QAAiBoB,EAK1D,OAJAuB,EAAa3C,MAAQgB,OAGrBU,EAAaC,UCvCHiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87214304.chunk.js","sourcesContent":["export const generateSquares = () => {\n  const squares = [];\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    \n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n  return squares;\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\n// Distructuring props\nconst Square = ({id, value, onClickCallback}) => {\n  // For Wave 1 enable this \n  // Component to alert a parent \n  // component when it's clicked on.\n\n  return (\n    <button className=\"square\" onClick={() => onClickCallback(id)}>\n      {value}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  const flattenSquares = squares.flat();\n\n  return flattenSquares.map(square => {\n    return (\n      <Square \n        key={square.id}\n        id={square.id} \n        value={square.value} \n        onClickCallback={onClickCallback}\n      />\n    );\n  });\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n\n  // console.log(squareList);\n\n  return (\n    <div className=\"grid\" >\n      {squareList}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport { generateSquares } from './components/helper'\nimport './App.css';\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst WINNING_LINES = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [filledSquareCount, setFilledSquareCount] = useState(0);\n  const [winner, setWinner] = useState(null);\n\n  const points = {\n    player1: 0,\n    player2: 0\n  }\n  const [score, setScore] = useState(points)\n  \n\n  // Wave 2\n  // You will need to create a method to change the square \n  // When it is clicked on.\n  // Then pass it into the squares as a callback\n  const handleSquareClick = (id) => {\n    const squaresCopy = [...squares] // same as clone in Ruby (spread operator)\n\n    for(let row in squaresCopy) {\n      for(let col in squaresCopy) {\n        let filledSquare = squaresCopy[row][col];\n\n        if (winner || filledSquareCount === 9) return;  // TODO\n          \n        if (filledSquare.id === id && filledSquare.value === '' && !winner) {\n          filledSquare.value = currentPlayer;\n\n          // Update states\n          updateStates(squaresCopy);\n          return;\n        };\n      }; \n    };\n  };\n\n\n  // helper funciton for Wave 2\n  const updateStates = (squaresCopy) => {\n    setFilledSquareCount(filledSquareCount + 1);\n    setSquares(squaresCopy);\n    switchPlayer(currentPlayer);\n    setWinner(checkForWinner());\n  };\n\n\n  // helper funciton for Wave 2 and Wave 4\n  const switchPlayer = (player) => {\n    player === PLAYER_1 ? setCurrentPlayer(PLAYER_2) : setCurrentPlayer(PLAYER_1);\n  };\n\n\n  const checkForWinner = () => {\n    // Complete in Wave 3\n    \n    for(let idx in WINNING_LINES) {\n      const [a, b, c] = WINNING_LINES[idx];  // Distructuring\n\n      const squareValues = getSquareValues();\n\n      if (squareValues[a] && squareValues[a] === squareValues[b] && squareValues[b] === squareValues[c]) {\n\n        updateScoreState(squareValues[a]); // set scores\n        return squareValues[a]; \n      };\n    };\n    return null;\n  };\n\n\n  // helper function for Wave 3\n  const getSquareValues = () => {\n    const squareValues = [];\n\n    squares.forEach(square => {\n      squareValues.push(square[0].value, square[1].value, square[2].value);\n    });\n\n    return squareValues; // e.g. [\"X\", \"O\", \"X\", \"X\", \"\", \"\" ....]\n  };\n\n  \n  // helper function for Wave 3 (setting a tie)\n  // When it's a tie, display \"everyone is a winner!\".\n  const isTie = () => {\n    if (filledSquareCount === 9 && !winner) {\n      return \"everyone\";\n    };\n  }\n\n  // helper function for Wave 3\n  const updateScoreState = (value) => {\n    if (value === PLAYER_1) {\n      setScore({\n        player1: score.player1 + 1,\n        player2: score.player2\n      });\n    } else {\n      setScore({\n        player1: score.player1,\n        player2: score.player2 + 1\n      });\n    };\n  };\n\n\n  const resetGame = () => {\n    // Complete in Wave 4\n    switchPlayer(winner);  // The first player would be loser from the previous game\n    setSquares(generateSquares());\n    setFilledSquareCount(0);\n    setWinner(null);\n  };\n\n  const resetScores = () => {\n    setScore({\n      player1: 0,\n      player2: 0\n    })\n  };\n\n  const printPlayerName = value => {\n    if (value === PLAYER_1) {\n      return 'Player 1 (X)';\n    } else {\n      return 'Player 2 (O)';\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"header-container\">\n          <h1>React Tic Tac Toe</h1>\n          <div className=\"score-chart\">\n            <h4>Scores</h4>\n            <h5>Player1 <span role=\"img\" aria-label=\"vs\">ðŸ†š</span> Player2 </h5>\n            <p className=\"score-number\">{score.player1} - {score.player2}</p>\n          </div>\n        </div>\n        \n\n        <h3 className={winner || isTie() ? 'hidden' : 'block'}>\n          Who's turn? {printPlayerName(currentPlayer)}\n        </h3>\n\n        <h3 className={!winner && !isTie() ? 'hidden' : 'block'}>\n          {isTie() ? isTie() : printPlayerName(winner)} is a winner! ðŸ˜Š \n        </h3>\n\n        <div className=\"button-container\">\n          <button className=\"purple-button button\" onClick={resetGame}>\n            Reset Game\n          </button>\n\n          <button className=\"blue-button button\" onClick={resetScores}>\n            Reset Scores\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <Board squares={squares} onClickCallback={handleSquareClick}/>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}